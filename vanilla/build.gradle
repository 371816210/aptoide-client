apply plugin: 'com.android.application'


Properties localProperties = new Properties()
localProperties.load(new FileInputStream("local.properties"))

def fabricApiKey = localProperties.FABRIC_API_KEY
def fabricConfigured = fabricApiKey != null
if(fabricConfigured) {
    task fabricGenerateProperties {
        doFirst {
            def fabricProperties = project.file("fabric.properties")
            fabricProperties.delete()
            fabricProperties.append("# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n")
            fabricProperties.append("apiKey=" + fabricApiKey.replaceAll("\"", ""))
        }
    }
    preBuild.dependsOn(fabricGenerateProperties)
    apply plugin: 'io.fabric'
}

def gmsServerId = localProperties.GMS_SERVER_ID
def gmsConfigured = (gmsServerId != null) && project.file("google-services.json").exists()
if(gmsConfigured) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    def TRUE = "true"
    def FALSE = "false"
    def BOOLEAN = "boolean"
    def STRING = "String"
    def REPORT_CRASHES = "REPORT_CRASHES"
    def GMS_CONFIGURED = "GMS_CONFIGURED"
    def LOCALYTICS_CONFIGURED = "LOCALYTICS_CONFIGURED"
    def AMAZON_CONFIGURED = "AMAZON_CONFIGURED"
    def AMAZON_PUBLIC_KEY = "AMAZON_PUBLIC_KEY"
    def AMAZON_PRIVATE_KEY = "AMAZON_PRIVATE_KEY"

    compileSdkVersion 23
    buildToolsVersion '23.0.1'
    defaultConfig {
        applicationId "cm.aptoide.pt.dev"
        targetSdkVersion 23
        versionCode 474
        versionName "7.0.7"

        def amazonPublicKey = localProperties.AMAZON_PUBLIC_KEY
        def amazonPrivateKey = localProperties.AMAZON_PRIVATE_KEY
        buildConfigField BOOLEAN, AMAZON_CONFIGURED, (amazonPublicKey != null && amazonPrivateKey != null).toString()
        buildConfigField STRING, AMAZON_PUBLIC_KEY, amazonPublicKey.toString()
        buildConfigField STRING, AMAZON_PRIVATE_KEY, amazonPrivateKey.toString()

        buildConfigField BOOLEAN, GMS_CONFIGURED, gmsConfigured.toString()
    }

    dexOptions {
        javaMaxHeapSize "3g"
    }

    signingConfigs { release }

    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21

            // Enabling multidex support.
            multiDexEnabled true
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 9

            applicationId "cm.aptoide.pt"
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            def localyticsKey = localProperties.LOCALYTICS_RELEASE_KEY
            def localyticsKeyExists = localyticsKey != null
            buildConfigField BOOLEAN, LOCALYTICS_CONFIGURED, localyticsKeyExists.toString()
            manifestPlaceholders = [ LOCALYTICS_APP_KEY:localyticsKeyExists ? localyticsKey : ""]
        }

        debug {
            zipAlignEnabled false
            minifyEnabled false
            buildConfigField BOOLEAN, REPORT_CRASHES, FALSE
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def localyticsKey = localProperties.LOCALYTICS_DEBUG_KEY
            def localyticsKeyExists = localyticsKey != null
            buildConfigField BOOLEAN, LOCALYTICS_CONFIGURED, localyticsKeyExists.toString()
            manifestPlaceholders = [ LOCALYTICS_APP_KEY:localyticsKeyExists ? localyticsKey : ""]
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("prod") && variant.buildType.name == "debug") {
            variant.ignore = true
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        pickFirst 'META-INF/services/javax.annotation.processing.Processor'
        pickFirst 'META-INF/DEPENDENCIES.txt'
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/MANIFEST.MF'
        pickFirst 'META-INF/LGPL2.1'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repo.commonsware.com.s3.amazonaws.com" }
}

dependencies {
    //    compile fileTree(include: ['*.jar'], dir: 'lib')
    compile files('lib/AudienceNetwork.jar')
    compile files('lib/PayPalAndroidSDK-2.8.4.jar')
    compile project(':amethystengine')
    compile 'com.commonsware.cwac:endless:1.2.3'
    provided 'org.projectlombok:lombok:1.16.4'
}

def File propFile = new File('signing.properties')
if (propFile.canRead()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        println 'all good to go'
    } else {
        android.buildTypes.release.signingConfig = null
        println 'signing.properties found but some entries are missing'
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
